<document>
  <position>1</position>
  <title>Introduction</title>
  <section>
    <docs>
      <![CDATA[
      The Radium API is designed around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer).
      The API is designed to be predictable and fast. HTTP verbs are used to
      indicate what action to do on a particiular resource. HTTP status codes
      are use to indicate the results. All response are given back in
      [JSON](http://www.json.org/). All requests happen over HTTPS to ensure
      security. All requests can be sent either as JSON or as standard URL
      encoded form bodies.

      The API allows you act like the user you are logged in
      as. System wide access is not allowed.

      You will need two things to start using the API.

      1. A Developer API key. This is your authentication token. We will
         monitor use of this specific token. Every application should have
         a unique token. This token is sent with every HTTP request.
      2. A User API key. This token is globally unique through out Radium.
         This allows you to complete actions as the user indentified by this
         token. This token never changes. You can use your developer API key
         to retreive user API keys.

      The API is designed to be developer friendly for many different HTTP
      clients in any different langauge or framework. You should have no
      problem using the API has long as your library can:

      1. Send `GET`, `POST`, `PUT`, and `DELETE` requests
      2. Set headers on individual requests
      3. Conduct HTTP authorization.

      Now that you know the basics, let's go
      over developer and user authentication. The server will authorize
      requests based on the resource, user, and action requested. You have no
      control over the authorization process. You can simply authenticate to
      the server.
      ]]>
    </docs>
  </section>
  <section title="Authentication">
    <docs>
      <![CDATA[
      The API has been designed to allow multiple ways to authenticate. It is
      designed this way because the authentication information should sent
      with every request. Different HTTP libraries allow you to configure them
      to do so but in different ways. The API is designed support a few common
      scenarios.

      1. Authentication by query string paramters. EX:
         `/foo?developer_api_key=bar&user_api_key=baz`
      2. HTTP authorization. EX:
         `https://developer_api_key@user_api_key:api.radiumcrm.com`
      3. Request Headers. EX `X-Radium-Developer-API-Key: foo`
      4. Form body paramters.

      Refer to your library's documentation to determine which authentication
      strategy is right for your application.
      ]]>
    </docs>
  </section>
  <section title="Parameter Parsing">
    <docs>
      <![CDATA[
      The API is designed to work these formats:

      1. `application/json` **RECOMMENDED**
      2. `application/x-www-form-urlencoded`
      3. `multipart/form-data` (for uploading Attachments and other files)

      Sending parameters as JSON encoded objects is the preferred and
      recommend way to interact with the API. JSON makes it easier to model
      some larger structures required by the API. The examples are also
      modeled using JSON input and JSON
      output. Your HTTP library should be able to use any
      of these formats, however it may not automatically encode JSON for you
      so be sure you know your HTTP library inside and out!
      ]]>
    </docs>
  </section>
  <section title="Encodings">
    <docs>
      <![CDATA[
      **All** requests should be encoded in UTF8. All responses will be in UTF8.
      It it your responsiblitiy to ensure that your code is sending the proper
      requests.
      ]]>
    </docs>
  </section>
  <section title="Times">
    <docs>
      <![CDATA[
      All times are stored in UTC. It is recommened, but not required that all
      incoming timestamps be in UTC. All times will be converted to UTC before
      entering the database. **All** times will be returned in UTC independent of
      whatever time zone they entered as. It is up to you to present the time
      in a different time zone if you want.

      Valid formats:
      * `YYYY-MM-DDTHH:MM:SSZ` (Z for UTC)
      * `YYYY-MM-DDTHH:MM:SS-DD:DD`
      * `YYYY-MM-DDTHH:MM:SS+DD:DD`

      Examples:

      * `2011-11-22T13:55:32Z`
      * `2011-11-22T13:55:32-08:00`
      * `2011-11-22T13:55:32+02:00`
      ]]>
    </docs>
  </section>
  <section title="Phone Numbers">
    <docs>
      <![CDATA[
      Phone numbers come up often in the system. All phone numbers should be in 
      international format. They should include a +/00 & country code, but this not mandatory.
      A number cannot use click to call or other VOIP related features unless it is
      international format.

      Here are some examples of valid phone numbers:

      * +19255778951
      * 009255778951
      * +358503213986
      * +358503213986#781
      * 5778951
      * 9255778951
      ]]>
    </docs>
  </section>
  <section title="Response Codes">
    <docs>
      <![CDATA[
      The API returns status codes to describe what happens for the particular
      response. This section is here to give you a overview of what the 
      API returns and how to interpert it.

      <dl>
        <dt>200</dt>
        <dd>
          <strong>Success</strong><br/>
          Pip-pip, jolly good fun ol' bean. Everything went according to plan
        </dd>

        <dt>201</dt>
        <dd>
          <strong>Created</strong><br/>
          Used when a POST to create a resource was successful
        </dd>

        <dt>202</dt>
        <dd>
          <strong>Accepted</strong><br/>
          Used when a requests enter a queuing system. They are
          processed later and my succeded or fail at that time. If you request
          returns a 202 it should be considered a success.
        </dd>

        <dt>401</dt>
        <dd>
          <strong>Unauthorized</strong><br/>
          Could not authenticate using the developer or user token.
          This is either because the tokens were not provided, provided incorrectly, or simply wrong.
        </dd>

        <dt>402</dt>
        <dd>
          <strong>Payment Required</strong><br/>
          Used when authentication worked, but the request 
          requires a UBB (Usage Based Billing) service that the user
          does not have enough credit for.
        </dd>

        <dt>403</dt>
        <dd>
          <strong>Forbidden</strong><br/>
          Used when authentication happened correctly, but the
          user does not have authorization to complete that action on the specific
          resource. Example, try to delete a user from a different account.
        </dd>

        <dt>404</dt>
        <dd>
          <strong>Not Found</strong><br/>
          Used when you the specified record could not be found
          in the system. This error will be raised if you try to access records
          outside the scope of the user's account or specify the ID incorrectly.
          Example, specify id is 5 when there is no Todo with id 5.
        </dd>

        <dt>405</dt>
        <dd>
          <strong>Method Not Allowed</strong><br/>
          Used when specific URL requires a POST but request comes as a GET.
        </dd>

        <dt>406</dt>
        <dd>
          <strong>Not Acceptable</strong><br/>
          Used then the API does not know how to generate a
          response for the specified format. Example, requesting XML when the
          API only returns JSON.
        </dd>

        <dt>422</dt>
        <dd>
          <strong>Unprocessable Entity (aka Validation Failed)</strong><br/>
          Used for all responses where the associated resource fails validation.
          For example, you tried to create a user but forgot to specify the email address.
          See the response body for a list of errors.
        </dd>

        <dt>429</dt>
        <dd>
          <strong>Too Many Requests</strong><br/>
          Application is over the rate limit.
        </dd>

        <dt>500</dt>
        <dd>
          <strong>Internal Server Error</strong><br/>
          Returned when an exception is raised on the
          server. This is usually because a bug has occured. 500 responses are
          automatically sent to admins for debugging. This means there is a
          problem with the server and not your application.
        </dd>

        <dt>502</dt>
        <dd>
          <strong>Bad Gateway</strong><br/>
          Used when an external server is needed to complete a request and it returned an error.
        </dd>

        <dt>503</dt>
        <dd>
          <strong>Down for maintenance</strong><br/>
          This is a temporary state.
        </dd>
      </dl>
      ]]>
    </docs>
  </section>
  <section title="Resources">
    <docs>
      <![CDATA[
      The API grants you access to all the fundamental resources in Radium.
      You should easily be able to use all these resources to create your own
      rich Application based off on the Radium platform. I'll give you
      a quick list of all the different things you can access. Refer to the
      individual sections for complete indepth disscussion of each resource
      and how it relates to the others.

      1. Users
      2. Contacts
      3. Groups
      4. Emails
      5. SMS
      6. IM
      7. Todos
      8. Call Lists
      10. Deals
      11. Phone Calls
      12. Meetings
      13. External Accounts (Microsoft Exchange & Google)
      14. Campaigns
      15. Call Lists
      16. Lead Capture
      17. Attachments
      18. Comments

      Each resource allows for basic CRUD (Create, Read, Update, and Delete)
      operations plus some specific actions for individual resources. For
      example, you can CRUD meetings as well as confirm or reject them. Basic
      CRUD operations give you (the developer) full control of the lifecyle of
      individual records.
      ]]>
    </docs>
  </section>
  <section title="Associated Resources">
    <docs>
      <![CDATA[
      Every resource is related another resource somehow. The amount of connections require some 
      design choices to be made. **When retreiving a list or a specific object, the API will give
      you the ID's of all the associated records.** This choice has been made to keep each response
      focused on the item(s) requested. If you want to retreive an associated object, use the API
      for that specific resource. 

      Here is an example. Users are associated with many contacts. When you retrieve a user it will
      contain the id's of all the associated contacts so you _may_ retrieve them if you like.
      ]]>
    </docs>
  </section>
  <section title="Push Notifications">
    <docs>
      <![CDATA[
      The platform will also send push notifications for changes to each
      record as well as specific events related to each record. For example,
      you may receive a `deal_closed` event. You can use a [Websocket](http://dev.w3.org/html5/websockets/)
      or a few other socket protocols to connect to the notification server.
      You should listen for notifications to keep your application's data up
      to date as it changes in real time. Authentication and listening is
      slightly different for push notifications. Refer to the push
      notification section for indepth discussion.
      ]]>
    </docs>
  </section>
  <section title="Pagination">
    <docs>
      <![CDATA[
      All `GET /resources` are paginated. Pagination is stored in the headers.
      You can access a specific page by passing a `page`. parameter.
      ]]>
    </docs>
    <reference title="Pagination Headers">
      <![CDATA[
      ```
      Server: nginx/0.7.67
      Date: Tue, 27 Dec 2011 20:07:14 GMT
      Content-Type: application/json; charset=utf-8
      Connection: close
      X-Radium-Current-Page: 1
      X-Radium-Total-Pages: 0
      X-Ua-Compatible: IE=Edge,chrome=1
      Etag: "d751713988987e9331980363e24189ce"
      Cache-Control: max-age=0, private, must-revalidate
      X-Request-Id: 8c7b0e478685cd25ffa9b925b60189bb
      X-Runtime: 0.138841
      X-Rack-Cache: miss
      Content-Length: 2
      X-Varnish: 1009793691
      Age: 0
      Via: 1.1 varnish
      ```
      ]]>
    </reference>
  </section>
  <section title="Nested Resources">
    <docs>
      <![CDATA[
      Some resources are managed through the parent. They inherit their 
      permissions through the parent. For example, notes are managed
      through the parent

      Each parent
      object has `notes_attributes` attribute used to manage
      the collection. You can do CRUD through this attribute.

      The attribute takes an array of field objects according
      to the format. 

      If you pass an `id` then that field will be updated.
      If you do not pass an `id` a new field will be created.
      If you pass `id` & `delete` the field will be deleted.
      ]]>
    </docs>
    <reference title="Nested Resources">
      <![CDATA[
      ```javascript
      {
        "notes_attributes": [
          {
            "id": 1,
            "text": "Change me!"
          },
          {
            "text": "This is a new note!",
          },
          {
            "_delete": true
            "id": 2
          }
        ]
      }
      ```
      ]]>
    </reference>
  </section>
  <section title="Help & Support">
    <docs>
      <![CDATA[
      IF you are having a prolem using or understanding **after having read
      the documentation** please email: [api-support@radiumcrm.com](mailto:
      api-support@radiumcrm.com). Someone will get back to you ASAP. If you
      happen to run into Adam Hawkins anywhere like on the street, in the
      club, on the beach, in Europe, in California, in Asia, or at a
      conference, or up in your codez, please give him a shout! He'd love to
      hear from you. 
      ]]>
    </docs>
  </section>
</document>
